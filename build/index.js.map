{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/*!\n * router\n * Copyright(c) 2015-2017 Fangdun Cai\n * MIT Licensed\n */\n\nimport { parseQuery, parseUrl } from './libs'\n\n// Static Param Any `*` `/` `:`\nconst [SKIND, PKIND, AKIND, STAR, SLASH, COLON] = [0, 1, 2, 42, 47, 58]\n\ntype Result<T = any> = [\n    handler: undefined | T,\n    params: [string, string][],\n    query: Record<string, string>\n]\n\nexport type HTTPMethod =\n    | 'ACL'\n    | 'BIND'\n    | 'CHECKOUT'\n    | 'CONNECT'\n    | 'COPY'\n    | 'DELETE'\n    | 'GET'\n    | 'HEAD'\n    | 'LINK'\n    | 'LOCK'\n    | 'M-SEARCH'\n    | 'MERGE'\n    | 'MKACTIVITY'\n    | 'MKCALENDAR'\n    | 'MKCOL'\n    | 'MOVE'\n    | 'NOTIFY'\n    | 'OPTIONS'\n    | 'PATCH'\n    | 'POST'\n    | 'PROPFIND'\n    | 'PROPPATCH'\n    | 'PURGE'\n    | 'PUT'\n    | 'REBIND'\n    | 'REPORT'\n    | 'SEARCH'\n    | 'SOURCE'\n    | 'SUBSCRIBE'\n    | 'TRACE'\n    | 'UNBIND'\n    | 'UNLINK'\n    | 'UNLOCK'\n    | 'UNSUBSCRIBE'\n\nclass TrekNode<T = any> {\n    label: number\n    prefix: string\n    children: any[]\n    kind: number\n    map: Record<\n        string,\n        {\n            handler: T\n            pnames: string\n        }\n    >\n\n    constructor(\n        prefix = '/',\n        children = [] as any[],\n        kind = SKIND,\n        map = Object.create(null)\n    ) {\n        this.label = prefix.charCodeAt(0)\n        this.prefix = prefix\n        this.children = children\n        this.kind = kind\n        this.map = map\n    }\n\n    addChild(n: any) {\n        this.children.push(n)\n    }\n\n    findChild(c: number, t: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (c === e?.label && t === e.kind) {\n                return e\n            }\n        }\n    }\n\n    findChildWithLabel(c: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (c === e?.label) {\n                return e\n            }\n        }\n    }\n\n    findChildByKind(t: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (t === e?.kind) {\n                return e\n            }\n        }\n    }\n\n    addHandler(method: string, handler: T, pnames: string) {\n        this.map[method] = { handler, pnames }\n    }\n\n    findHandler(method: string) {\n        return this.map[method]\n    }\n}\n\nexport default class Router<T = any> {\n    _tree: TrekNode<T>\n    routes: any[]\n\n    constructor() {\n        this._tree = new TrekNode()\n        this.routes = []\n    }\n\n    add(method: string, path: string, handler: T) {\n        let [i, l, pnames] = [0, path.length, [] as string[]]\n        let ch: number, j: number\n\n        this.routes.push([method, path, handler])\n\n        for (; i < l; ++i) {\n            ch = path.charCodeAt(i)\n            if (ch === COLON) {\n                j = i + 1\n\n                this._insert(method, path.substring(0, i), SKIND)\n                while (i < l && path.charCodeAt(i) !== SLASH) i++\n\n                pnames.push(path.substring(j, i))\n                path = path.substring(0, j) + path.substring(i)\n                i = j\n                l = path.length\n\n                if (i === l)\n                    return void this._insert(\n                        method,\n                        path.substring(0, i),\n                        PKIND,\n                        pnames,\n                        handler\n                    )\n\n                this._insert(method, path.substring(0, i), PKIND, pnames)\n            } else if (ch === STAR) {\n                this._insert(method, path.substring(0, i), SKIND)\n                pnames.push('*')\n                this._insert(\n                    method,\n                    path.substring(0, l),\n                    AKIND,\n                    pnames,\n                    handler\n                )\n                return\n            }\n        }\n        this._insert(method, path, SKIND, pnames, handler)\n    }\n\n    _insert(\n        method: string,\n        path: string,\n        t: number,\n        pnames?: any,\n        handler?: any\n    ) {\n        // Copy current TrekNode as root\n        let [cn] = [this._tree]\n        let prefix, sl, pl, l, max, n, c\n\n        while (true) {\n            prefix = cn.prefix\n            sl = path.length\n            pl = prefix.length\n            l = 0\n\n            // LCP\n            max = sl < pl ? sl : pl\n            while (l < max && path.charCodeAt(l) === prefix.charCodeAt(l)) {\n                l++\n            }\n\n            /*\n      If (l === 0) {\n        // At root TrekNode\n        cn.label = search.charCodeAt(0)\n        cn.prefix = search\n        if (handler !== undefined) {\n          cn.addHandler(method, { pnames, handler })\n        }\n      } else if (l < pl) {\n      */\n            if (l < pl) {\n                // Split TrekNode\n                n = new TrekNode(\n                    prefix.substring(l),\n                    cn.children,\n                    cn.kind,\n                    cn.map\n                )\n                cn.children = [n] // Add to parent\n\n                // Reset parent TrekNode\n                cn.label = prefix.charCodeAt(0)\n                cn.prefix = prefix.substring(0, l)\n                cn.map = Object.create(null)\n                cn.kind = SKIND\n\n                if (l === sl) {\n                    // At parent TrekNode\n                    cn.addHandler(method, handler, pnames)\n                    cn.kind = t\n                } else {\n                    // Create child TrekNode\n                    n = new TrekNode(path.substring(l), [], t)\n                    n.addHandler(method, handler, pnames)\n                    cn.addChild(n)\n                }\n            } else if (l < sl) {\n                path = path.substring(l)\n                c = cn.findChildWithLabel(path.charCodeAt(0))\n                if (c !== undefined) {\n                    // Go deeper\n                    cn = c\n                    continue\n                }\n                // Create child TrekNode\n                n = new TrekNode(path, [], t)\n                n.addHandler(method, handler, pnames)\n                cn.addChild(n)\n            } else if (handler !== undefined) {\n                // TrekNode already exists\n                cn.addHandler(method, handler, pnames)\n            }\n            return\n        }\n    }\n\n    find(method: HTTPMethod, url: string): Result<T> {\n        const [path, stringifiedQuery] = parseUrl(url)\n\n        let result = this._find(method, path, undefined, 0, [\n            undefined,\n            []\n        ] as any)\n\n        // @ts-ignore\n        result[2] = stringifiedQuery ? parseQuery(stringifiedQuery) : {}\n\n        return result\n    }\n\n    _find(\n        method: HTTPMethod,\n        path: string,\n        cn: TrekNode | undefined,\n        n: number,\n        result: Result<T>\n    ) {\n        cn = cn || this._tree // Current TrekNode as root\n        const sl = path.length\n        const prefix = cn.prefix\n        const pvalues = result[1] as any[] // Params\n        let i, pl, l, max, c\n        let preSearch // Pre search\n\n        // Search order static > param > match-any\n        if (sl === 0 || path === prefix) {\n            // Found\n            const r = cn.findHandler(method)\n            if ((result[0] = r && r.handler) !== undefined) {\n                const pnames = r.pnames\n                if (pnames !== undefined) {\n                    for (i = 0, l = pnames.length; i < l; ++i) {\n                        pvalues[i] = [pnames[i], pvalues[i]]\n                    }\n                }\n            }\n            return result\n        }\n\n        pl = prefix.length\n        l = 0\n\n        // LCP\n        max = sl < pl ? sl : pl\n        while (l < max && path.charCodeAt(l) === prefix.charCodeAt(l)) l++\n\n        if (l === pl) path = path.substring(l)\n\n        preSearch = path\n\n        // Static TrekNode\n        c = cn.findChild(path.charCodeAt(0), SKIND)\n        if (c !== undefined) {\n            this._find(method, path, c, n, result)\n            if (result[0] !== undefined) {\n                return result\n            }\n            path = preSearch\n        }\n\n        // Not found TrekNode\n        if (l !== pl) {\n            return result\n        }\n\n        // Param TrekNode\n        c = cn.findChildByKind(PKIND)\n        if (c !== undefined) {\n            l = path.length\n            i = 0\n            while (i < l && path.charCodeAt(i) !== SLASH) {\n                i++\n            }\n\n            pvalues[n] = path.substring(0, i)\n\n            n++\n            preSearch = path\n            path = path.substring(i)\n\n            this._find(method, path, c, n, result)\n            if (result[0] !== undefined) return result\n\n            n--\n            pvalues.pop()\n            path = preSearch\n        }\n\n        // Any TrekNode\n        c = cn.findChildByKind(AKIND)\n        if (c !== undefined) {\n            pvalues[n] = path\n            path = '' // End search\n            this._find(method, path, c, n, result)\n        }\n\n        return result\n    }\n}\n"],"names":["Router","SKIND","PKIND","AKIND","STAR","SLASH","COLON","TrekNode","constructor","prefix","children","kind","map","Object","create","label","charCodeAt","addChild","n","push","findChild","c","t","l","e","i","length","findChildWithLabel","findChildByKind","addHandler","method","handler","pnames","findHandler","_tree","routes","add","path","ch","j","_insert","substring","cn","sl","pl","max","undefined","find","url","stringifiedQuery","parseUrl","result","_find","parseQuery","pvalues","preSearch","r","pop"],"mappings":"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"}