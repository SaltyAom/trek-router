{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["/*!\n * router\n * Copyright(c) 2015-2017 Fangdun Cai\n * MIT Licensed\n */\n\n'use strict'\n\nimport { parse as parseQueryString, type ParsedUrlQuery } from 'querystring'\n\n// Static Param Any `*` `/` `:`\nconst [SKIND, PKIND, AKIND, STAR, SLASH, COLON] = [0, 1, 2, 42, 47, 58]\n\ntype Result<T = any> = [\n    handler: undefined | T,\n    params: [string, string][],\n    query: ParsedUrlQuery\n]\n\nexport type HTTPMethod =\n    | 'ACL'\n    | 'BIND'\n    | 'CHECKOUT'\n    | 'CONNECT'\n    | 'COPY'\n    | 'DELETE'\n    | 'GET'\n    | 'HEAD'\n    | 'LINK'\n    | 'LOCK'\n    | 'M-SEARCH'\n    | 'MERGE'\n    | 'MKACTIVITY'\n    | 'MKCALENDAR'\n    | 'MKCOL'\n    | 'MOVE'\n    | 'NOTIFY'\n    | 'OPTIONS'\n    | 'PATCH'\n    | 'POST'\n    | 'PROPFIND'\n    | 'PROPPATCH'\n    | 'PURGE'\n    | 'PUT'\n    | 'REBIND'\n    | 'REPORT'\n    | 'SEARCH'\n    | 'SOURCE'\n    | 'SUBSCRIBE'\n    | 'TRACE'\n    | 'UNBIND'\n    | 'UNLINK'\n    | 'UNLOCK'\n    | 'UNSUBSCRIBE'\n\nexport const removeHostnamePath = (path: string) => {\n    if (path.charCodeAt(0) === 47) return path\n\n    const total = path.length\n\n    let i = 1\n    let point = 0\n\n    for (; i < total; i++)\n        if (path.charCodeAt(i) === 47)\n            if (point < 2) point++\n            else break\n\n    return path.slice(i)\n}\n\nconst splitQuery = (s: string) => {\n    const i = s.indexOf('?')\n\n    if (i === -1) return [s, '']\n\n    return [s.slice(0, i), s.slice(i + 1)]\n}\n\nclass TrekNode<T = any> {\n    label: number\n    prefix: string\n    children: any[]\n    kind: number\n    map: Record<\n        string,\n        {\n            handler: T\n            pnames: string\n        }\n    >\n\n    constructor(\n        prefix = '/',\n        children = [] as any[],\n        kind = SKIND,\n        map = Object.create(null)\n    ) {\n        this.label = prefix.charCodeAt(0)\n        this.prefix = prefix\n        this.children = children\n        this.kind = kind\n        this.map = map\n    }\n\n    addChild(n: any) {\n        this.children.push(n)\n    }\n\n    findChild(c: number, t: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (c === e?.label && t === e.kind) {\n                return e\n            }\n        }\n    }\n\n    findChildWithLabel(c: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (c === e?.label) {\n                return e\n            }\n        }\n    }\n\n    findChildByKind(t: number, l?: number, e?: TrekNode, i = 0) {\n        for (l = this.children.length; i < l; i++) {\n            e = this.children[i]\n            if (t === e?.kind) {\n                return e\n            }\n        }\n    }\n\n    addHandler(method: string, handler: T, pnames: string) {\n        this.map[method] = { handler, pnames }\n    }\n\n    findHandler(method: string) {\n        return this.map[method]\n    }\n}\n\nexport default class Router<T = any> {\n    #tree: TrekNode<T>\n    routes: any[]\n\n    constructor() {\n        this.#tree = new TrekNode()\n        this.routes = []\n    }\n\n    add(method: string, path: string, handler: T) {\n        let [i, l, pnames] = [0, path.length, [] as string[]]\n        let ch: number, j: number\n\n        this.routes.push([method, path, handler])\n\n        for (; i < l; ++i) {\n            ch = path.charCodeAt(i)\n            if (ch === COLON) {\n                j = i + 1\n\n                this.#insert(method, path.substring(0, i), SKIND)\n                while (i < l && path.charCodeAt(i) !== SLASH) {\n                    i++\n                }\n\n                pnames.push(path.substring(j, i))\n                path = path.substring(0, j) + path.substring(i)\n                i = j\n                l = path.length\n\n                if (i === l) {\n                    this.#insert(\n                        method,\n                        path.substring(0, i),\n                        PKIND,\n                        pnames,\n                        handler\n                    )\n                    return\n                }\n                this.#insert(method, path.substring(0, i), PKIND, pnames)\n            } else if (ch === STAR) {\n                this.#insert(method, path.substring(0, i), SKIND)\n                pnames.push('*')\n                this.#insert(\n                    method,\n                    path.substring(0, l),\n                    AKIND,\n                    pnames,\n                    handler\n                )\n                return\n            }\n        }\n        this.#insert(method, path, SKIND, pnames, handler)\n    }\n\n    #insert(\n        method: string,\n        path: string,\n        t: number,\n        pnames?: any,\n        handler?: any\n    ) {\n        // Copy current TrekNode as root\n        let [cn] = [this.#tree]\n        let prefix, sl, pl, l, max, n, c\n\n        while (true) {\n            prefix = cn.prefix\n            sl = path.length\n            pl = prefix.length\n            l = 0\n\n            // LCP\n            max = sl < pl ? sl : pl\n            while (l < max && path.charCodeAt(l) === prefix.charCodeAt(l)) {\n                l++\n            }\n\n            /*\n      If (l === 0) {\n        // At root TrekNode\n        cn.label = search.charCodeAt(0)\n        cn.prefix = search\n        if (handler !== undefined) {\n          cn.addHandler(method, { pnames, handler })\n        }\n      } else if (l < pl) {\n      */\n            if (l < pl) {\n                // Split TrekNode\n                n = new TrekNode(\n                    prefix.substring(l),\n                    cn.children,\n                    cn.kind,\n                    cn.map\n                )\n                cn.children = [n] // Add to parent\n\n                // Reset parent TrekNode\n                cn.label = prefix.charCodeAt(0)\n                cn.prefix = prefix.substring(0, l)\n                cn.map = Object.create(null)\n                cn.kind = SKIND\n\n                if (l === sl) {\n                    // At parent TrekNode\n                    cn.addHandler(method, handler, pnames)\n                    cn.kind = t\n                } else {\n                    // Create child TrekNode\n                    n = new TrekNode(path.substring(l), [], t)\n                    n.addHandler(method, handler, pnames)\n                    cn.addChild(n)\n                }\n            } else if (l < sl) {\n                path = path.substring(l)\n                c = cn.findChildWithLabel(path.charCodeAt(0))\n                if (c !== undefined) {\n                    // Go deeper\n                    cn = c\n                    continue\n                }\n                // Create child TrekNode\n                n = new TrekNode(path, [], t)\n                n.addHandler(method, handler, pnames)\n                cn.addChild(n)\n            } else if (handler !== undefined) {\n                // TrekNode already exists\n                cn.addHandler(method, handler, pnames)\n            }\n            return\n        }\n    }\n\n    find(method: HTTPMethod, url: string): Result<T> {\n        const [path, query] = splitQuery(removeHostnamePath(url))\n\n        let result = this.#find(method, path, undefined, 0, [\n            undefined,\n            []\n        ] as any)\n\n        if (query)\n            // @ts-ignore\n            result[2] = parseQueryString(query)\n\n        return result\n    }\n\n    #find(\n        method: HTTPMethod,\n        path: string,\n        cn: TrekNode | undefined,\n        n: number,\n        result: Result<T>\n    ) {\n        cn = cn || this.#tree // Current TrekNode as root\n        const sl = path.length\n        const prefix = cn.prefix\n        const pvalues = result[1] as any[] // Params\n        let i, pl, l, max, c\n        let preSearch // Pre search\n\n        // Search order static > param > match-any\n        if (sl === 0 || path === prefix) {\n            // Found\n            const r = cn.findHandler(method)\n            if ((result[0] = r && r.handler) !== undefined) {\n                const pnames = r.pnames\n                if (pnames !== undefined) {\n                    for (i = 0, l = pnames.length; i < l; ++i) {\n                        pvalues[i] = [pnames[i], pvalues[i]]\n                    }\n                }\n            }\n            return result\n        }\n\n        pl = prefix.length\n        l = 0\n\n        // LCP\n        max = sl < pl ? sl : pl\n        while (l < max && path.charCodeAt(l) === prefix.charCodeAt(l)) l++\n\n        if (l === pl) path = path.substring(l)\n\n        preSearch = path\n\n        // Static TrekNode\n        c = cn.findChild(path.charCodeAt(0), SKIND)\n        if (c !== undefined) {\n            this.#find(method, path, c, n, result)\n            if (result[0] !== undefined) {\n                return result\n            }\n            path = preSearch\n        }\n\n        // Not found TrekNode\n        if (l !== pl) {\n            return result\n        }\n\n        // Param TrekNode\n        c = cn.findChildByKind(PKIND)\n        if (c !== undefined) {\n            l = path.length\n            i = 0\n            while (i < l && path.charCodeAt(i) !== SLASH) {\n                i++\n            }\n\n            pvalues[n] = path.substring(0, i)\n\n            n++\n            preSearch = path\n            path = path.substring(i)\n\n            this.#find(method, path, c, n, result)\n            if (result[0] !== undefined) return result\n\n            n--\n            pvalues.pop()\n            path = preSearch\n        }\n\n        // Any TrekNode\n        c = cn.findChildByKind(AKIND)\n        if (c !== undefined) {\n            pvalues[n] = path\n            path = '' // End search\n            this.#find(method, path, c, n, result)\n        }\n\n        return result\n    }\n}\n"],"names":["parse","parseQueryString","SKIND","PKIND","AKIND","STAR","SLASH","COLON","removeHostnamePath","path","charCodeAt","total","length","i","point","slice","splitQuery","s","indexOf","TrekNode","constructor","prefix","children","kind","map","Object","create","label","addChild","n","push","findChild","c","t","l","e","findChildWithLabel","findChildByKind","addHandler","method","handler","pnames","findHandler","Router","tree","routes","add","ch","j","insert","substring","cn","sl","pl","max","undefined","find","url","query","result","pvalues","preSearch","r","pop"],"mappings":"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"}